// 競プロ用スニペット
{
  // 短縮系
  "rep": {
    "prefix": ["rep", "for ("],
    "body": "for (int ${1:i} = ${2:0}; ${1:i} < ${3:N}; ${1:i}++) $0"
  },
  "All iterator": {
    "prefix": [".all"],
    "body": ".begin(), ${1:A}.end()"
  },
  "All reverse iterator": {
    "prefix": [".rall"],
    "body": ".rbegin(), ${1:A}.rend()"
  },
  // デバッグ用
  "vector stdout": {
    "prefix": ["debug"],
    "body": [
      "template <class T> ostream& operator<<(ostream& stream, vector<T>& vec) { for (int i = 0; i < (int)vec.size(); i++) {stream << vec[i] << \" \\n\"[i == (int)vec.size() - 1];} return stream;}"
    ],
    "description": "vector をストリームに流す"
  },
  // ライブラリ
  "Union Find": {
    "prefix": ["dsu", "union find"],
    "body": [
      "struct dsu {public:dsu() : _n(0) {}explicit dsu(int n) : _n(n), parent_or_size(n, -1) {}int merge(int a, int b) {assert(0 <= a && a < _n);assert(0 <= b && b < _n);int x = leader(a), y = leader(b);if (x == y) return x;if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);parent_or_size[x] += parent_or_size[y];parent_or_size[y] = x;return x;} bool same(int a, int b) {assert(0 <= a && a < _n);assert(0 <= b && b < _n);return leader(a) == leader(b);}int leader(int a) {assert(0 <= a && a < _n);if (parent_or_size[a] < 0) return a;return parent_or_size[a] = leader(parent_or_size[a]);}int size(int a) {assert(0 <= a && a < _n);return -parent_or_size[leader(a)];}std::vector<std::vector<int>> groups() {std::vector<int> leader_buf(_n), group_size(_n);for (int i = 0; i < _n; i++) {leader_buf[i] = leader(i);group_size[leader_buf[i]]++;}std::vector<std::vector<int>> result(_n);for (int i = 0; i < _n; i++) {result[i].reserve(group_size[i]);}for (int i = 0; i < _n; i++) {result[leader_buf[i]].push_back(i);} result.erase(std::remove_if(result.begin(), result.end(),[&](const std::vector<int>& v) { return v.empty(); }), result.end());return result;}private:int _n;\n// root node: -1 * component size\n// otherwise: parent\n std::vector<int> parent_or_size;};"
    ]
  }
}
